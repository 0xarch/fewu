const PATH = require("path");
const MARKED = require("marked");
const Hug = require('./hug');
const Hail = require('./hail');

class JPassage{
    content;
    author;
    license;
    category;
    id;
    foreword;
}

/**
 * 
 * @param { string } content 
 * @returns {{title:string,date:string,category:string,path:string,src:string,content:string,top:boolean}}
 */
function ReadData(content) {
    const lines = content.split("\n");
    const data = {};
    let i = 0;

    if (lines[i] === "---") {
        i++;
        while (lines[i] !== "---") {
            const match = lines[i].match(/^(\w+):\s*(.*)/);
            if (match) {
                data[match[1]] = match[2];
            }
            i++;
        }
        i++;
    }
    try{
        data.transformed_title = data.title.replace(/[\,\.\<\>\ \-\+\=\~\`\?\/\|\\\!\@\#\$\%\^\&\*\(\)\[\]\{\}\:\;\"\'\～\·\「\」\；\：\‘\’\“\”\，\。\《\》\？\！\￥\…\、\（\）]/g,'_'); 
        data.path = `${data.date.replace(/[\-\.]/g,"/")}/${data.transformed_title}/index.html`;
        data.src = `/${data.date.replace(/[\-\.]/g,"/")}/${data.transformed_title}/`;
        data.top = data.top=="true" ? true : false;
    }catch(_) {}
    data.textContent = lines.slice(i).join('\n');
    data.parsedContent = MARKED.parse(data.textContent);
    data.less = extractLess(data.textContent);
    data.lessContent = findLessContent(lines);
    if(data.category!=undefined){
        data.category = data.category.split(" ");
    }else{
        data.category=[];
    }
    data.JSDate = new Date(data.date);
    return data;
}

/* Generated By Cursor GPT */
function extractLess(content) {
    const lines = content.split("\n");
    const moreIndex = lines.indexOf("<!--more-->");

    if (moreIndex !== -1) {
        return MARKED.parse(lines.slice(0, moreIndex).join("\n").replace(/\#*/g, ""));
    } else {
        return MARKED.parse(lines.slice(0, 5).join("\n").replace(/\#*/g, ""));
    }
}

function findLessContent(lines) {
    const moreIndex = lines.indexOf('<!--more-->');
    return lines.slice(0, (moreIndex !== -1) ?moreIndex :5) .join('n').replace(/\#*/g,'');
}

function ReadPosts(PostDir, SPECIAL_POSTS) {
    let bid = 0;
    Hug.log("读取目录",PostDir);
    let Posts = new Array,
        Specials = {};
    for (let path of Hail.traverse(PostDir)) {
        let item = PATH.basename(path, PostDir);
        let file_text = Hail.readFile(path);
        let file_data = ReadData(file_text);
        file_data.bid = bid;
        
        if (SPECIAL_POSTS.includes(item)) Specials[item] = file_data;
        else Posts.push(file_data);
        bid += 1;
    }
    return {
        Posts,
        Specials
    };
}

exports.ReadPosts = (POST_DIR, SPECIAL_POSTS) => ReadPosts(POST_DIR, SPECIAL_POSTS);

function Sort(a, b) {
    const A = a.date,
        B = b.date;
    const Ay = A.slice(0, 4),
        By = B.slice(0, 4);
    if (Ay > By) return -1;
    else if (Ay < By) return 1;
    else { // Ay = By
        const Am = A.slice(5, 7),
            Bm = B.slice(5, 7);
        if (Am > Bm) return -1;
        else if (Am < Bm) return 1;
        else { // Am = Bm
            return B.slice(8, 10) - A.slice(8, 10);
        }
    }
}

const _SortPassage = (a,b) =>{
    const A = a.date,
        B = b.date;
    const Ay = A.slice(0, 4),
        By = B.slice(0, 4);
    if (Ay > By) return -1;
    else if (Ay < By) return 1;
    else { // Ay = By
        const Am = A.slice(5, 7),
            Bm = B.slice(5, 7);
        if (Am > Bm) return -1;
        else if (Am < Bm) return 1;
        else { // Am = Bm
            return B.slice(8, 10) - A.slice(8, 10);
        }
    }
}

function getSort(POSTS) {
    const SortedPosts = POSTS.sort(Sort);
    const rawByDate = POSTS.sort(_SortPassage);
    Hug.log("开始","排序 & 分类");

    // ______ BID & 最近 & 默认 ______
    const BID = {};
    const byDate = [];
    for (let item of rawByDate) {
        BID[item.bid] = item;
        byDate.push(item.bid);
    }
    const Sorted = Array.from(byDate);
    const RecentPosts = Sorted.slice(0, 5);

    // _______ 置顶 _______
    var topPosts = [];
    var untopPosts = [];

    /*SortedPosts.forEach((item) => {
        if (item.top == "true") {
            topPosts.push(item.bid);
        } else {
            untopPosts.push(item.bid);
        }
    });*/
    for(let item of rawByDate){
        if(item.top){
            topPosts.push(item.bid);
        }else{
            untopPosts.push(item.bid);
        }
    }
    const DefaultPosts = topPosts.concat(untopPosts);
    const byDefault = topPosts.concat(untopPosts);

    // _________ 分类 _________
    const categories = [];
    DefaultPosts.forEach(item => {
        item=BID[item];
        for(let category of item.category)
            if (!categories.includes(category)) {
                categories.push(category);
            }
    });
    const byCategory = {};
    categories.forEach(item=>{
        /*
            Sorts.byCategory：
            {
                "分类名" : [ ...包含在该分类中的博客BID... ],
                ...
            }
        */
        byCategory[item] = [];
        SortedPosts.forEach(item2=>{
            if(item2.category.includes(item))
                byCategory[item].push(item2.bid);
        });
    });
    console.log(byCategory);

    // ______ 日期 ______
    const SortedByDate = {};
    for(let item of POSTS){
        let date = new Date(item.date);
        let year = date.getFullYear(),month=date.getMonth()+1,day=date.getDate();
        if(!SortedByDate[year])SortedByDate[year]={};
        if(!SortedByDate[year][month])SortedByDate[year][month]={};
        if(!SortedByDate[year][month][day])SortedByDate[year][month][day]=new Array;
        SortedByDate[year][month][day].push(item.bid);
    }

    // *** 更新日期 & 按更新日期归分
    const UpdateDates = {};
    const byUpdateDate = {};
    for(let item of POSTS){
        let date = new Date(item.date);
        let y = date.getFullYear(), m = date.getMonth()+1, d = date.getDate();
        if(! byUpdateDate[y]){
            UpdateDates[y] = {};
            byUpdateDate[y] = {};
        }
        if(! byUpdateDate[y][m]){
            UpdateDates[y][m] = [];
            byUpdateDate[y][m] = {};
        }
        if(! byUpdateDate[y][m][d]){
            UpdateDates[y][m].push(d);
            byUpdateDate[y][m][d] = [];
        }
        byUpdateDate[y][m][d].push(item.bid);
    }

    return {
        Posts: SortedPosts,
        byDefault,
        byCategory,
        categories,
        byUpdateDate,
        byDate,
        RecentPosts,
        Sorted,
        UpdateDates,
        BID
    }
}

exports.getSort = (POSTS) => getSort(POSTS);