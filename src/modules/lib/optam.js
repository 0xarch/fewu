const PATH = require("path");
const MARKED = require("marked");
const Hug = require('./hug');
const Hail = require('./hail');

/**
 * 
 * @param { string } content 
 * @returns {{title:string,date:string,category:string,path:string,src:string,content:string,top:boolean}}
 */
function ReadData(content) {
    const lines = content.split("\n");
    const data = {};
    let i = 0;

    if (lines[i] === "---") {
        i++;
        while (lines[i] !== "---") {
            const match = lines[i].match(/^(\w+):\s*(.*)/);
            if (match) {
                data[match[1]] = match[2];
            }
            i++;
        }
        i++;
    }
    try{
        data.transformed_title = data.title.replace(/[\,\.\<\>\ \-\+\=\~\`\?\/\|\\\!\@\#\$\%\^\&\*\(\)\[\]\{\}\:\;\"\'\～\·\「\」\；\：\‘\’\“\”\，\。\《\》\？\！\￥\…\、\（\）]/g,'_'); 
        data.path = `${data.date.replace(/-/g,"/")}/${data.transformed_title}/index.html`;
        data.src = `/${data.date.replace(/-/g,"/")}/${data.transformed_title}/`;
        data.top = data.top=="true" ? true : false;
    }catch(_) {}
    // data.content = lines.slice(i).join("\n");
    data.textContent = lines.slice(i).join('\n');
    data.less = extractLess(data.textContent);
    data.lessContent = findLessContent(lines);
    if(data.category!=undefined){
        data.category = data.category.split(" ");
    }else{
        data.category=[];
    }
    return data;
}

/* Generated By Cursor GPT */
function extractLess(content) {
    const lines = content.split("\n");
    const moreIndex = lines.indexOf("<!--more-->");

    if (moreIndex !== -1) {
        return MARKED.parse(lines.slice(0, moreIndex).join("\n").replace(/\#*/g, ""));
    } else {
        return MARKED.parse(lines.slice(0, 5).join("\n").replace(/\#*/g, ""));
    }
}

function findLessContent(lines) {
    const moreIndex = lines.indexOf('<!--more-->');
    return lines.slice(0, (moreIndex !== -1) ?moreIndex :5) .join('n').replace(/\#*/g,'');
}

function ReadPosts(PostDir, SPECIAL_POSTS) {
    let bid = 0;
    Hug.log("读取目录",PostDir);
    let Posts = new Array,
        Specials = {};
    for (let path of Hail.traverse(PostDir)) {
        let item = PATH.basename(path, PostDir);
        let file_text = Hail.readFile(path);
        let file_data = ReadData(file_text);
        // file_data.content = MARKED.parse(file_data.content);
        file_data.bid = bid;
        
        if (SPECIAL_POSTS.includes(item)) Specials[item] = file_data;
        else Posts.push(file_data);
        bid += 1;
    }
    return {
        Posts,
        Specials
    };
}

exports.ReadPosts = (POST_DIR, SPECIAL_POSTS) => ReadPosts(POST_DIR, SPECIAL_POSTS);